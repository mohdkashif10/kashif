import java.util.Scanner;

public class MatrixOperations {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean exit = false;

        while (!exit) {
            System.out.println("\n=== Matrix Operations ===");
            System.out.println("1. Matrix Multiplication");
            System.out.println("2. Matrix Addition");
            System.out.println("3. Matrix Subtraction");
            System.out.println("4. Transpose of a Matrix");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    // Perform matrix multiplication
                    System.out.println("Matrix Multiplication Selected.");
                    int[][] matrix1 = readMatrix(scanner, "first");
                    int[][] matrix2 = readMatrix(scanner, "second");

                    if (matrix1[0].length != matrix2.length) {
                        System.out.println("Matrix multiplication is not possible. Number of columns in the first matrix must equal the number of rows in the second matrix.");
                    } else {
                        int[][] result = multiplyMatrices(matrix1, matrix2);
                        System.out.println("Resultant Matrix after Multiplication:");
                        displayMatrix(result);
                    }
                    break;

                case 2:
                    // Perform matrix addition
                    System.out.println("Matrix Addition Selected.");
                    int[][] addMatrix1 = readMatrix(scanner, "first");
                    int[][] addMatrix2 = readMatrix(scanner, "second");

                    if (addMatrix1.length != addMatrix2.length || addMatrix1[0].length != addMatrix2[0].length) {
                        System.out.println("Matrix addition is not possible. Matrices must have the same dimensions.");
                    } else {
                        int[][] addResult = addMatrices(addMatrix1, addMatrix2);
                        System.out.println("Resultant Matrix after Addition:");
                        displayMatrix(addResult);
                    }
                    break;

                case 3:
                    // Perform matrix subtraction
                    System.out.println("Matrix Subtraction Selected.");
                    int[][] subMatrix1 = readMatrix(scanner, "first");
                    int[][] subMatrix2 = readMatrix(scanner, "second");

                    if (subMatrix1.length != subMatrix2.length || subMatrix1[0].length != subMatrix2[0].length) {
                        System.out.println("Matrix subtraction is not possible. Matrices must have the same dimensions.");
                    } else {
                        int[][] subResult = subtractMatrices(subMatrix1, subMatrix2);
                        System.out.println("Resultant Matrix after Subtraction:");
                        displayMatrix(subResult);
                    }
                    break;

                case 4:
                    // Transpose of a matrix
                    System.out.println("Transpose of a Matrix Selected.");
                    int[][] transposeMatrix = readMatrix(scanner, "the");
                    int[][] transposed = transposeMatrix(transposeMatrix);
                    System.out.println("Transpose of the Matrix:");
                    displayMatrix(transposed);
                    break;

                case 5:
                    // Exit the program
                    System.out.println("Exiting the program. Goodbye!");
                    exit = true;
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }

        scanner.close();
    }

    // Method to read a matrix from user input
    public static int[][] readMatrix(Scanner scanner, String matrixName) {
        System.out.println("Enter the number of rows for the " + matrixName + " matrix: ");
        int rows = scanner.nextInt();
        System.out.println("Enter the number of columns for the " + matrixName + " matrix: ");
        int cols = scanner.nextInt();

        int[][] matrix = new int[rows][cols];
        System.out.println("Enter elements of the " + matrixName + " matrix:");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                System.out.print("Matrix[" + i + "][" + j + "]: ");
                matrix[i][j] = scanner.nextInt();
            }
        }
        return matrix;
    }

    // Method to multiply two matrices
    public static int[][] multiplyMatrices(int[][] matrix1, int[][] matrix2) {
        int rows1 = matrix1.length;
        int cols1 = matrix1[0].length;
        int cols2 = matrix2[0].length;

        int[][] result = new int[rows1][cols2];

        for (int i = 0; i < rows1; i++) {
            for (int j = 0; j < cols2; j++) {
                for (int k = 0; k < cols1; k++) {
                    result[i][j] += matrix1[i][k] * matrix2[k][j];
                }
            }
        }
        return result;
    }

    // Method to add two matrices
    public static int[][] addMatrices(int[][] matrix1, int[][] matrix2) {
        int rows = matrix1.length;
        int cols = matrix1[0].length;
        int[][] result = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[i][j] = matrix1[i][j] + matrix2[i][j];
            }
        }
        return result;
    }

    // Method to subtract two matrices
    public static int[][] subtractMatrices(int[][] matrix1, int[][] matrix2) {
        int rows = matrix1.length;
        int cols = matrix1[0].length;
        int[][] result = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[i][j] = matrix1[i][j] - matrix2[i][j];
            }
        }
        return result;
    }

    // Method to transpose a matrix
    public static int[][] transposeMatrix(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        int[][] result = new int[cols][rows];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[j][i] = matrix[i][j];
            }
        }
        return result;
    }

    // Method to display a matrix
    public static void displayMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int value : row) {
                System.out.print(value + "\t");
            }
            System.out.println();
        }
    }
}
